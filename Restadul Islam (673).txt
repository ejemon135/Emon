----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Task_1



#include<stdio.h>    

int factorial(int n)        

{                       

  if(n==1)                

  {                  

    return 1;                

  }                     

  return factorial(n-1)*n;

}



int main()

{

  printf("%d\n\n",factorial(6));

  return 0;

}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Task_2  



#include<stdio.h>

int fibonacci(int n)

{

  if(n <= 1)

  {

    return n;

  }

  else

  {

    return fibonacci(n-1)+fibonacci(n-2);

  }

}



int main()

{

  int result;

  result= fibonacci(20);

  printf("%d", result);



  return 0;

}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Task_3  



#include<stdio.h>

int print_array(int size, int arr[], int start)

{

  if(start >= size)

  {

    return;

  }

  else

  {

    printf("%d\t", arr[start]);

  }

  print_array(size, arr, start+1);

}

int main()

{

  int array[5]={9, 13, 5, 6, 3};



  print_array(5, array, 0);



  return 0;

}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Task_5  



#include<stdio.h>

int power(int n, int p)         

{                      

  if(p==0)            

  {                

    return 1;              

  }                  

  return power(n, p-1)*n;

}



int main()

{

  printf("%d\n",power(5,4));



  return 0;

}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

						Searching & Sorting
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1. Selection sort 

#include<stdio.h>

int main()

{

  int n = 5;

  int arr[5] = {8, 11, 7, 6, 13};

  int i, j, min;



  printf("My original array is: \n");

  for(i=0; i<n; i++)

  {

    printf("%d\t",arr[i]);

  }



  for (i = 0; i < n - 1; i++)

  {

    min = i;

    for (j=i+1; j<n; j++)

    {

      if (arr[j] < arr[min])

      {

        min = j;

      }

    }

    int temp = arr[min];

    arr[min] = arr[i];

    arr[i] = temp;

  }



  printf("\nMy sorted array is: \n");

  for (i = 0; i < n; i++)

  {

    printf("%d\t", arr[i]);

  }



  printf("\n\n");

  return 0;

}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2. Insertion sort 

#include<stdio.h>

void i_sort(int array[], int size)   

{

  if(size<=0)           

  {

    return;         

  }

  i_sort(array, size-1);      

  int last=array[size-1];      

  int j=size-2;         

  while(j>=0 && array[j]>last)  

  {

    array[j+1]=array[j];     

    j--;             

  }

  array[j+1]=last;          

}



int main()

{

  int array[5]={6, 4, 2, 7, 5};    

  i_sort(array, 5);         

  printf("My sorted array is: \n");

  for(int i=0; i<5; i++)       

  {

    printf("%d\t", array[i]);

  }



  printf("\n\n");



  return 0;

}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3. Binary Search 

#include<stdio.h>

int b_Search (int arr [], int target, int left, int right)

{

  if (left > right)                        

  {

    return -1;                     

  }



  int mid = (left + right) / 2;               



  if (target == arr [mid])            

  {

    return mid;                     

  }

  else if (target < arr [mid])
    return b_Search (arr, target, left, mid - 1);       

  }

  else

  {

    return b_Search (arr, target, mid + 1, right);     

  }

}



int main()

{

  int array[6]= {4, 11, 2, 7, 9, 5};              

  int size=6;                          

  int right=size-1;                       

  int left=size-size;                       

  int target=2;                         

  int result=b_Search(array, target, left, right);      



  printf("%d\n\n", result);                   





  return 0;

}




